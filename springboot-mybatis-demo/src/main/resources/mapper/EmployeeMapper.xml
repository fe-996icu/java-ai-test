<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.icu.mybatis.mapper.EmployeeMapper">
    <!-- 根据员工id查询员工信息 -->
    <select id="findByIdOfXml" resultType="com.icu.mybatis.pojo.Employee">
        select * from employee where id = #{id}
    </select>

    <select id="pageNew" resultType="com.icu.mybatis.pojo.Employee" parameterType="com.icu.mybatis.vo.employee.EmployeeRequestPageVo">
        select * from employee
        <where>
            <if test="name!=null and name!=''">
                and name like concat('%', #{name}, '%')
            </if>
            <if test="phone!=null and phone!=''">
                and phone like concat('%', #{phone}, '%')
            </if>
            <!-- 这里判断 status=0 的时候也要追加查询条件，status为0!=''会返回false，所以需要使用toString方法然后在判断 -->
            <!-- 或者使用 status!=null and (status!='' or status==0) -->
            <!-- 或者只使用 status!=null 即可 -->
            <if test="status!=null and (status!='' or status==0)">
                and status = #{status}
            </if>
            <if test="deptId!=null">
                and dept_id = #{deptId}
            </if>
            <if test="jobId!=null and jobId!=''">
                and job_id = #{jobId}
            </if>
            <if test="beginBirthday!=null and endBirthday!=null">
                and birthday between #{beginBirthday} and #{endBirthday}
            </if>
            <if test="beginJoinDate!=null and endJoinDate!=null">
                and join_date between #{beginJoinDate} and #{endJoinDate}
            </if>
        </where>
        <!-- 在xml中sql语句结果还是不能加分号，因为要使用PageHelper的分页功能 -->
        order by update_date desc
    </select>

    <!-- 经过验证，parameterType 不指定也可以，和注解方式一样，传入的参数类型如果是对象，直接写对象的属性名 -->
    <update id="updateEmployeeOfXml"  parameterType="com.icu.mybatis.pojo.Employee">
        update employee set name = #{name}, gender = #{gender}, phone = #{phone}, birthday = #{birthday}, dept_id = #{deptId},
        job_id = #{jobId}, join_date = #{joinDate}, update_date = #{updateDate}, status = #{status}
        where id = #{id}
    </update>

    <update id="updateEmployee"  parameterType="com.icu.mybatis.pojo.Employee">
        update employee set name = #{name}, gender = #{gender}, phone = #{phone}, birthday = #{birthday}, dept_id = #{deptId},
        job_id = #{jobId}, join_date = #{joinDate}, update_date = #{updateDate}, status = #{status}
        where id = #{id}
    </update>

    <delete id="deleteEmployee">
        delete from employee where id = #{id}
    </delete>

    <select id="findByStatus" resultType="com.icu.mybatis.pojo.Employee">
        select * from employee
        where status in
        <!-- statusList是Mapper接口的形参名 -->
        <foreach collection="statusList" item="status" open="(" separator="," close=")">
            #{status}
        </foreach>
    </select>

    <insert id="saveEmpExpr" useGeneratedKeys="true" keyProperty="id">
        insert into emp_expr (emp_id, begin_date, end_date, company, job)
        values (#{empId}, #{beginDate}, #{endDate}, #{company}, #{job})
    </insert>

    <insert id="saveEmpExprList" useGeneratedKeys="true" keyProperty="id">
        insert into emp_expr (emp_id, begin_date, end_date, company, job)
        values
        <foreach collection="list" item="expr" separator=",">
            (#{expr.empId}, #{expr.beginDate}, #{expr.endDate}, #{expr.company}, #{expr.job})
        </foreach>
    </insert>

    <!-- 按照员工工作类型统计员工人数 -->
    <select id="statsEmpOfJob" resultType="com.icu.mybatis.vo.StatsEmpByJobVo">
        select j.id as jobId, j.name as jobName, count(0) as total from job j
            inner join employee e on e.job_id = j.id
            group by j.id
            order by j.id asc;
    </select>

    <!-- type是指定映射成哪个实体类 -->
<!--    <resultMap id="empResultMap" type="com.icu.mybatis.pojo.Employee">-->
<!--        &lt;!&ndash; 主键id使用id标签，其他使用result &ndash;&gt;-->
<!--        <id property="id" column="id"/>-->
<!--        <result property="name" column="name"/>-->
<!--        <result property="gender" column="gender"/>-->
<!--        <result property="phone" column="phone"/>-->

<!--        &lt;!&ndash; 封装exprList，ofType是集合中的每个元素映射成哪个实体类&ndash;&gt;-->
<!--        <collection property="exprList" ofType="com.icu.mybatis.pojo.EmpExpr">-->
<!--            <id property="id" column="expr_id"/>-->
<!--            <result property="beginDate" column="expr_begin_date"/>-->
<!--            <result property="endDate" column="expr_end_date"/>-->
<!--            <result property="company" column="expr_company"/>-->
<!--            <result property="job" column="expr_job"/>-->
<!--        </collection>-->
<!--    </resultMap>-->

    <!-- empResultMap是引用上面resultMap的id值 -->
<!--    <select id="getById" resultMap="empResultMap">-->
<!--        select-->
<!--            e.*,-->
<!--            ee.id as expr_id,-->
<!--            ee.begin_date as expr_begin_date,-->
<!--            ee.end_date as expr_end_date,-->
<!--            ee.company as expr_company,-->
<!--            ee.job as expr_job-->
<!--        from employee e-->
<!--        left join emp_expr ee on e.id = ee.emp_id-->
<!--        where id = #{id}-->
<!--    </select>-->
</mapper>